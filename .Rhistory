getwd()
getwd()
setwd(dir = "/Users/Maja/Documents/Anamaria/erichpipeline/")
source("enrichment.R")
lineprof::lineprof(enrichment(result))
source("enrichment.R")
lineprof::lineprof(enrichment(result))
source("enrichment.R")
lineprof::lineprof(enrichment(result))
source("enrichment.R")
lineprof::lineprof(enrichment(result))
source("enrichment.R")
lineprof::lineprof(enrichment(result))
pvals
sums
for (x in top_rows) {
set(contable,
#i = ...,
j = x,
value = binom.test(y[i,x], as.numeric(sums[,..x]), contable[i,all]/sums[,all])$p.value)
}
set(contable,
#i = ...,
j = x,
value = binom.test(contable[i,x], as.numeric(sums[,..x]), contable[i,all]/sums[,all])$p.value)
set(contable,
#i = ...,
j = x,
value = binom.test(contable[,x], as.numeric(sums[,..x]), contable[,all]/sums[,all])$p.value)
for (x in top_rows) {
set(contable,
#i = ...,
j = x,
value = binom.test(contable[,..x], as.numeric(sums[,..x]), contable[,all]/sums[,all])$p.value)
}
contable
for (x in top_rows) {
for (i in seq_along(nrow(contable))) {
set(contable,
i = rows[i],
j = x,
value = binom.test(contable[rows[i],..x], as.numeric(sums[,..x]), contable[rows[i],all]/sums[rows[i],all])$p.value)
}
}
contable[,..row]
top[, all := all]
top
contable
contable[, .(all, row), with=FALSE]
contable[, c("all", row), with=FALSE]
sum(ct[,..row])
ct
ct <- contable[, c("all", row), with=FALSE]
sum(ct[,..row])
top.sum
top.sum <- sum(ct[,..row])
top <- contable[,..row]
top.sum <- sum(top)
ct <- contable[, c("all", row), with=FALSE]
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct
ct[, ':='(enrich = (scaled_top - scaled_all) / scaled_all * 100,
M = log2(scaled_top) - log2(scaled_all),
A = (log2(scaled_all) + log2(scaled_top)) / 2)]
ct
(scaled_top - scaled_all) / scaled_all * 100
scaled_top <- top + 1
scaled_top
top
top.sum
top <- as.integer(contable[,..row])
top
top <- as.integer(contable[,..row])
top
top <- unlist(contable[,..row])
top
top <- contable[,row]
top <- unname(unlist(contable[,..row]))
top
top.sum <- sum(top)
ct <- contable[, c("all", row), with=FALSE]
sc <- top.sum / all.sum
sc
scaled_top <- top + 1
scaled_top
scaled_all <- all * sc + 1
scaled_all
ct[, ':='(enrich = (scaled_top - scaled_all) / scaled_all * 100,
M = log2(scaled_top) - log2(scaled_all),
A = (log2(scaled_all) + log2(scaled_top)) / 2)]
ct
pvals <-
apply(ct[,c("all", row), with = FALSE], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
ct <- contable[, c("all", row), with = FALSE]
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
pvals <-
apply(ct[,c("all", row), with = FALSE], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
padj = p.adjust(pvals, method = "BH")
ct[, ':='(enrich = (scaled_top - scaled_all) / scaled_all * 100,
M = log2(scaled_top) - log2(scaled_all),
A = (log2(scaled_all) + log2(scaled_top)) / 2,
pvals = pvals,
padj = padj)]
ct
by.top <- sapply(top_rows, function(row) {
top <- unname(unlist(contable[,..row]))
top.sum <- sum(top)
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct <- contable[, c("all", row), with = FALSE]
pvals <-
apply(ct[,c("all", row), with = FALSE], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
padj = p.adjust(pvals, method = "BH")
ct[, ':='(enrich = (scaled_top - scaled_all) / scaled_all * 100,
M = log2(scaled_top) - log2(scaled_all),
A = (log2(scaled_all) + log2(scaled_top)) / 2,
pvals = pvals,
padj = padj)]
}, simplify = FALSE)
by.top
out <- by.top <- sapply(top_rows, function(row) {
top <- unname(unlist(contable[,..row]))
top.sum <- sum(top)
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct <- contable[, c("all", row), with = FALSE]
pvals <-
apply(ct[,c("all", row), with = FALSE], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
padj = p.adjust(pvals, method = "BH")
ct[, ':='(enrich = (scaled_top - scaled_all) / scaled_all * 100,
M = log2(scaled_top) - log2(scaled_all),
A = (log2(scaled_all) + log2(scaled_top)) / 2,
pvals = pvals,
padj = padj)]
}, simplify = FALSE)
all.equal(out, outo)
class(out)
lapply(out, function(x) class(x) <- "data.frame")
head(out)
head(outo)
bound <- do.call(cbind, by.top)
out <- data.frame(all = all, bound)
all.equal(out, outo)
head(out)
head(outo)
make.stats <- function(contable) {
rows <- names(contable)
top_rows <- rows[grep("top", rows)]
all <- contable$all
all.sum <- sum(all)
by.top <- sapply(top_rows, function(row) {
top <- contable[,row]
top.sum <- sum(top)
ct <- data.frame(all = all, top)
names(ct) <- c("all", "cnt")
rownames(ct) <- rownames(contable)
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct$enrich <- (scaled_top - scaled_all) / scaled_all * 100
ct$M <- log2(scaled_top) - log2(scaled_all)
ct$A <- (log2(scaled_all) + log2(scaled_top)) / 2
pvals =
apply(ct[,c("all", "cnt")], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
ct$pvals = pvals
ct$padj = p.adjust(pvals, method = "BH")
ct$all <- NULL
ct
}, simplify = FALSE)
bound <- do.call(cbind, by.top)
data.frame(all = all, bound)
}
make.stats <- function(contable) {
rows <- names(contable)
top_rows <- rows[grep("top", rows)]
all <- contable$all
all.sum <- sum(all)
by.top <- sapply(top_rows, function(row) {
top <- contable[,row]
top.sum <- sum(top)
ct <- data.frame(all = all, top)
names(ct) <- c("all", "cnt")
rownames(ct) <- rownames(contable)
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct$enrich <- (scaled_top - scaled_all) / scaled_all * 100
ct$M <- log2(scaled_top) - log2(scaled_all)
ct$A <- (log2(scaled_all) + log2(scaled_top)) / 2
pvals =
apply(ct[,c("all", "cnt")], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
ct$pvals = pvals
ct$padj = p.adjust(pvals, method = "BH")
ct$all <- NULL
ct
}, simplify = FALSE)
#bound <- do.call(cbind, by.top)
#data.frame(all = all, bound)
}
enrichment <- function(contable) {
rows <- names(contable)
top_rows <- rows[grep("top|gt", rows)]
all <- contable$all
all.sum <- sum(all)
by.top <- sapply(top_rows, function(row) {
top <- unname(unlist(contable[,..row]))
top.sum <- sum(top)
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct <- contable[, c("all", row), with = FALSE]
pvals <-
apply(ct[,c("all", row), with = FALSE], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
padj = p.adjust(pvals, method = "BH")
ct[, ':='(enrich = (scaled_top - scaled_all) / scaled_all * 100,
M = log2(scaled_top) - log2(scaled_all),
A = (log2(scaled_all) + log2(scaled_top)) / 2,
pvals = pvals,
padj = padj)]
}, simplify = FALSE)
#bound <- do.call(cbind, by.top)
#out <- data.frame(all = all, bound)
}
resdf <- result
class(resdf) <- "data.frame"
microbenchmark(
a1 = make.stats(resdf),
a2 = enrichment(result),
times = 10L
)
all.equal(a1, a2)
a1 = make.stats(resdf)
a2 = enrichment(result)
all.equal(a1, a2)
names(a1)
names(a2)
make.stats <- function(contable) {
rows <- names(contable)
top_rows <- rows[grep("top|gt", rows)]
all <- contable$all
all.sum <- sum(all)
by.top <- sapply(top_rows, function(row) {
top <- contable[,row]
top.sum <- sum(top)
ct <- data.frame(all = all, top)
names(ct) <- c("all", "cnt")
rownames(ct) <- rownames(contable)
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct$enrich <- (scaled_top - scaled_all) / scaled_all * 100
ct$M <- log2(scaled_top) - log2(scaled_all)
ct$A <- (log2(scaled_all) + log2(scaled_top)) / 2
pvals =
apply(ct[,c("all", "cnt")], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
ct$pvals = pvals
ct$padj = p.adjust(pvals, method = "BH")
ct$all <- NULL
ct
}, simplify = FALSE)
#bound <- do.call(cbind, by.top)
#data.frame(all = all, bound)
}
enrichment <- function(contable) {
rows <- names(contable)
top_rows <- rows[grep("top|gt", rows)]
all <- contable$all
all.sum <- sum(all)
by.top <- sapply(top_rows, function(row) {
top <- unname(unlist(contable[,..row]))
top.sum <- sum(top)
sc <- top.sum / all.sum
scaled_top <- top + 1
scaled_all <- all * sc + 1
ct <- contable[, c("all", row), with = FALSE]
pvals <-
apply(ct[,c("all", row), with = FALSE], 1, function(x) {
b = binom.test(x[2], top.sum, x[1]/all.sum)
b$p.value
})
padj = p.adjust(pvals, method = "BH")
ct[, ':='(enrich = (scaled_top - scaled_all) / scaled_all * 100,
M = log2(scaled_top) - log2(scaled_all),
A = (log2(scaled_all) + log2(scaled_top)) / 2,
pvals = pvals,
padj = padj)]
}, simplify = FALSE)
#bound <- do.call(cbind, by.top)
#out <- data.frame(all = all, bound)
}
a2 = enrichment(result)
a1 = make.stats(resdf)
all.equal(a1, a2)
a1
lapply(a1, head)
lapply(a2, head)
out <- enrichment(contable)
class(out)
saveRDS(out, "enrich.Robj")
devtools::load_all(".")
??pathview
library(pathview)
source("https://bioconductor.org/biocLite.R")
biocLite("pathview")
browseVignettes("KEGGgraph")
??pathiview
data(gse16873.d)
library(pathview)
data(gse16873.d)
filename=system.file("extdata/gse16873.demo", package = "pathview")
gse16873=read.delim(filename, row.names=1)
gse16873.d=gse16873[,2*(1:6)]-gse16873[,2*(1:6)-1]
head(gse16873)
head(gse16873.d)
devtools::load_all(".")
setwd("/Users/Maja/Documents/Anamaria/erichpipeline")
# make codonTable objects
load("codonsInSamples.Robj")
data.table::setDT(codonsInSamples)
codonsInSamples[, sample := regmatches(ID, regexpr("[HL]D\\d+", ID))]
smpl <- codonsInSamples[sample == "HD15", ] # just one sample for now!
cds <- smpl[, 2:65]
class(cds) <- "data.frame"
cdt <- codonTable(cds)
cdt <- setKO(cdt, as.character(smpl$KO))
saveRDS(cdt, file = "cdt.Robj")
# MILC
milc <- MILC(cdt, ribosomal = T)
head(milc)
# MELP
melp <- MELP(cdt, ribosomal = T)
head(melp)
genes <- getKO(cdt)
contab_KO <- make.contable(genes, melp, threshold = 1)
enrich_KO <- enrichment(contab_KO)
enrich_KO
kos <- unlist(unname(enrich$gt_1[,"category"]))[1:576]
kos <- unlist(unname(enrich$gt_1[,"category"]))[1:576]
enrich_KO
contab_KO <- make.contable(genes, melp, threshold = 1, percentiles = 0.05)
enrich_KO <- enrichment(contab_KO)
enrich_KO
lapply(enrich_KO, function(x) x[padj<0.05,])
lapply(enrich_KO, function(x) x[padj<0.1,])
contab_KO <- make.contable(genes, melp, threshold = 1, percentiles = 0.1)
enrich_KO <- enrichment(contab_KO)
lapply(enrich_KO, function(x) x[padj<0.05,])
contab_KO <- make.contable(genes, melp, threshold = 1, percentiles = c(0.001, 0.05, 0.1, 0.5))
enrich_KO <- enrichment(contab_KO)
lapply(enrich_KO, function(x) x[padj<0.05,])
contab_KO
?pathview
pathview(enrich_KO$gt_1[,category])
pathview(enrich_KO$gt_1[,category], pathway.id = "map")
data(demo.paths)
demo.paths$sel.paths[1]
pathview(enrich_KO$gt_1[,category], pathway.id = "01100")
source("https://bioconductor.org/biocLite.R")
biocLite("KEGGREST")
library(KEGGREST)
paths <- names(keggList("pathway"))
paths <- regmatches(paths, regexpr("[[:alpha:]]{2,4}\\d{5}", paths)) # 523 paths
kop <- lapply(paths, function(x){
KO <- unname(keggLink("ko", x))
KO <- regmatches(KO, regexpr("K\\d{5}", KO))
if (length(KO) == 0) KO <- NA
data.table(CATEGORY = x, KO = KO)
})
KO_PATHWAYS <- rbindlist(kop)
mods <- names(keggList("module"))
mods <- regmatches(mods, regexpr("M\\d{5}", mods)) # 788 modules
kom <- lapply(mods, function(x){
KO <- unname(keggLink("ko", x))
KO <- regmatches(KO, regexpr("K\\d{5}", KO))
if (length(KO) == 0) KO <- NA
data.table(CATEGORY = x, KO = KO)
})
KO_MODULES <- rbindlist(kom)
library(data.table)
paths <- names(keggList("pathway"))
paths <- regmatches(paths, regexpr("[[:alpha:]]{2,4}\\d{5}", paths)) # 523 paths
kop <- lapply(paths, function(x){
KO <- unname(keggLink("ko", x))
KO <- regmatches(KO, regexpr("K\\d{5}", KO))
if (length(KO) == 0) KO <- NA
data.table(CATEGORY = x, KO = KO)
})
KO_PATHWAYS <- rbindlist(kop)
mods <- names(keggList("module"))
mods <- regmatches(mods, regexpr("M\\d{5}", mods)) # 788 modules
kom <- lapply(mods, function(x){
KO <- unname(keggLink("ko", x))
KO <- regmatches(KO, regexpr("K\\d{5}", KO))
if (length(KO) == 0) KO <- NA
data.table(CATEGORY = x, KO = KO)
})
KO_MODULES <- rbindlist(kom)
RPKOs = c("K02945", "K02967", "K02982", "K02986", "K02988", "K02990", "K02992", "K02994", "K02996",
"K02946", "K02948" ,"K02950" ,"K02952" ,"K02954" ,"K02956" ,"K02959" ,"K02961" ,"K02963" ,
"K02965" , "K02968" , "K02970" , "K02981" , "K02985" , "K02984" , "K02987" , "K02989" , "K02991",
"K02993" , "K02995" , "K02997" , "K02947" , "K02949" , "K02951" , "K02953" , "K02955" , "K02958" ,
"K02957" , "K02960" , "K02962" , "K02964" , "K02966" , "K02969" , "K02971" , "K02973" , "K02974" , "K02975" ,
"K02976" , "K02978" , "K02977" , "K02979" , "K02980" , "K02983" , "K02998" , "K02863" , "K02886" ,
"K02906" , "K02926" , "K02931" , "K02933" , "K02935" , "K02939" , "K02864" , "K02867" , "K02869" ,
"K02871" , "K02874" , "K02876" , "K02878" , "K02879" , "K02881" , "K02884" , "K02887" , "K02888" ,
"K02890" , "K02892" , "K02895" , "K02897" , "K02899" , "K02902" , "K02904" , "K02907" , "K02909" ,
"K02911" , "K02913" , "K02914" , "K02916" , "K02919" , "K07590" , "K02925" , "K02930" , "K02932" ,
"K02934" , "K02937" , "K02936" , "K02938" , "K02940" , "K02866" , "K02865" , "K02868" , "K02870" ,
"K02873" , "K02872" , "K02875" , "K02877" , "K02880" , "K02883" , "K02882" , "K02885" , "K02889" ,
"K02891" , "K02894" , "K02893" , "K02896" , "K02898" , "K02901" , "K02900" , "K02903" , "K02905" ,
"K02908" , "K02910" , "K02912" , "K02915" , "K02918" , "K02917" , "K02920" , "K02922" , "K02921" ,
"K02923" , "K02924" , "K02927" , "K02928" , "K02929" , "K02941" , "K02942" , "K02943" , "K02944" ,
"K01977" , "K01980" , "K01985" , "K01979" , "K01982" , "K01981"
)
devtools::use_data(KO_PATHWAYS, KO_MODULES, RPKOs, internal = TRUE)
getwd()
# create R/sysdata.rda file with non-exported data sets
devtools::use_data(KO_PATHWAYS, KO_MODULES, internal = TRUE)
devtools::use_data(KO_PATHWAYS, KO_MODULES, internal = TRUE)
devtools::load_all(".")
devtools::use_data(KO_PATHWAYS, KO_MODULES, internal = TRUE)
devtools::load_all(".")
?enrichment
??enrichment
rm(KO_MODULES)
rm(KO_PATHWAYS)
rm(kom)
rm(kop)
rm(demo.paths)
rm(bods)
rm(mods)
rm(RPKOs)
rm(paths)
kos <- unlist(unname(enrich$gt_1[,"category"]))[1:576]
kos <- unlist(unname(enrich)KO$gt_1[,"category"]))[1:576]
kos <- unlist(unname(enrich_KO$gt_1[,"category"]))[1:576]
paths <- keggLink("pathway", kos)
reduce.contable(contab_KO, "pathway")
devtools::load_all(".")
reduce.contable(contab_KO, "pathway")
source('~/Anamaria/coRdon/R/enrichment.R', echo=TRUE)
rm(reduce.contable())
rm(reduce.contable)
rm(make.contable)
rm(enrichment)
devtools::load_all(".")
devtools::load_all(".")
reduce.contable(contab_KO, "pathway")
devtools::load_all(".")
reduce.contable(contab_KO, "pathway")
devtools::load_all(".")
reduce.contable(contab_KO, "pathway")
out <- reduce.contable(contab_KO, "pathway")
out2 <- reduce.contable(contab_KO, "pathway")
out2 <- out
address(out)
address(out)
data.table::address(out)
data.table::address(out2)
devtools::load_all(".")
reduce.contable(contab_KO, "pathway")
out3 <- reduce.contable(contab_KO, "pathway")
all.equal(out, out3)
rm(out)
rm(out2)
rm(out3)
contab_PATH <- reduce.contable(contab_KO, "pathway")
contab_MOD <- reduce.contable(contab_KO, "module")
contab_MOD
contab_PATH
enrich_PATH <- enrichment(contab_PATH)
enrich_MOD <- enrichment(contab_MOD)
enrich_MOD
enrich_PATH
library(ggbiplot)
install.packages("ggbiplot")
?keggConv
?keggLink
?listDatabases
listDatabases
KEGGREST::listDatabases()
View(contab_KO)
