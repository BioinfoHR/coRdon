{
    "contents" : "library(pathview)\nlibrary(plyr)\nlibrary(pheatmap)\nlibrary(corrplot)\nlibrary(ggbiplot)\nlibrary(GGally)\n\nbaseFolder <- \"C:/Users/kristian/Dropbox/Collaborations/Huson\"\nsetwd(baseFolder)\n\nmin_length <- 30\npercentile_top <- 0.90\nperc <- c(0.95, 0.90, 0.85, 0.70, 0.50)\nKEGG_maps_folder <- \"KEGG_maps\"\n\n# load KO and BRITE ontologies (use separate script to prepare)\nload(\"ko.Robj\")\nload(\"brite.Robj\")\n\ndatasets <- c(\"AS50\", \"AS50d\", \"AS44\", \"AS43\", \"AS45\", \"AS51\", \"AS64\", \"AS65\", \"AS56\", \"AS68\")\npoints <- c(0, 3, 6, 12, 18, 24)\n\nreduce.contable <- function(ctb, column = \"B\") {\n  values <- unique(ko[,column])\n  tt <- lapply(values, function(x){\n    KOs <- ko[ko[,column] == x, \"KO\", drop=TRUE]\n    KOs <- unique(KOs)\n    counts <- subset(ctb, KO %in% KOs , select = -KO)\n    colSums(counts, na.rm = TRUE)\n  })\n  contable <- do.call(rbind, tt)\n  rownames(contable) <- values\n  as.data.frame(contable)\n}\n\nmake.stats <- function(contable) {\n  \n  rows <- names(contable)\n  top_rows <- rows[grep(\"top\", rows)]\n  \n  all <- contable$all\n  all.sum <- sum(all)\n  \n  by.top <- sapply(top_rows, function(row) {\n\n    top <- contable[,row]\n    top.sum <- sum(top)\n\n    ct <- data.frame(all = all, top)\n    names(ct) <- c(\"all\", \"cnt\")\n    rownames(ct) <- rownames(contable)\n    \n    #  contable$enrich <- (contable$top / top.sum - contable$all / all.sum) * all.sum / top.sum * 100\n    \n#    eps <- top.sum/all.sum / 10\n\n    sc <- top.sum / all.sum\n    \n    scaled_top <- top + 1\n#    scaled_top <- (top * all.sum / top.sum) + 1\n#    scaled_top[scaled_top == 0] <- 0.01\n    \n    scaled_all <- all * sc + 1\n#    scaled_all[scaled_all == 0] <- 0.01\n    \n    ct$enrich <- (scaled_top - scaled_all) / scaled_all * 100\n    ct$M <- log2(scaled_top) - log2(scaled_all)\n    ct$A <- (log2(scaled_all) + log2(scaled_top)) / 2\n    \n    pvals = \n      apply(ct[,c(\"all\", \"cnt\")], 1, function(x) {\n        b = binom.test(x[2], top.sum, x[1]/all.sum)\n        b$p.value\n      })\n    ct$pvals = pvals\n    ct$padj = p.adjust(pvals, method = \"BH\")\n    ct$all <- NULL\n    ct\n  }, simplify = FALSE)\n  \n  bound <- do.call(cbind, by.top)\n  data.frame(all = all, bound)\n  \n}\n\nmake.contable <- function(csm, perc) {\n\n  all <- as.vector(table(csm$KO))\n  top <- sapply(perc, function(x) {\n    as.vector(table(csm[csm$melp >= quantile(csm$melp, x), \"KO\"]))\n  })\n  top <- as.data.frame(top)\n  names(top) <- make.names(paste(\"top\", perc, sep=\"_\"))\n  \n  data.frame(all = all, top, KO = levels(csm$KO), row.names = levels(csm$KO))\n}  \n\nexpand.names <-function(kos) {\n  kos.df <- data.frame(KO = kos)\n  mrg <- join(kos.df, ko[, c(\"KO\", \"desc\")], by=\"KO\", match = \"first\")\n  mrg$desc <- strtrim(mrg$desc, 30)\n  v <- paste(mrg$desc, mrg$KO)\n  v\n}\n\nfor (dataset in datasets) {\n  \n  setwd(paste(baseFolder, dataset, sep=\"/\"))\n  ds_file <- paste(dataset, \"csmilc.RDS\", sep=\"_\")\n  # load entire dataset\n  csmilc <- readRDS(ds_file)\n  \n  en_file <- paste(dataset, \"enrichment.RDS\", sep=\"_\")\n\n  if(file.exists(en_file)) {\n    load(en_file)\n  } else {  \n    enrichment <- list()\n    stages <- names(csmilc)\n    \n    for (stage in stages) {\n      \n      #st <- paste(dataset, stage, sep=\"_\")\n      st <- stage\n      # filter length\n      csm <- csmilc[[st]]\n      csm <- csm[csm$len > min_length,]\n      \n      # convert KO to factor (if not already)\n      csm$KO <- as.factor(csm$KO)\n      \n      # three levels of ontology exist: B (very broad), C (pathways), and KO (orthology)\n      # we'll summarize by each level separately\n      \n      # make a contingency table for KO level, this is the base for other two\n      contable_ko <- make.contable(csm, perc)\n      \n      \n      contable_b <- reduce.contable(contable_ko, \"B\")\n      contable_b <- make.stats(contable_b)\n      contable_b$B <- rownames(contable_b)\n  #    write.table(contable_b, file=paste(st,\"contable_b.txt\", sep=\"_\"), row.names = FALSE, sep = \"\\t\")\n      enrichment[[st]][[\"B\"]] <- contable_b\n      \n      contable_c <- reduce.contable(contable_ko, \"C\")\n      contable_c <- make.stats(contable_c)\n      contable_c$C <- rownames(contable_c)\n      contable_cc <- merge(contable_c, brite, by.x=\"C\", by.y=\"C\", all.x=TRUE)\n  #    contable_cc <- contable_cc[order(contable_cc$padj),]\n  #    write.table(contable_cc, file=paste(st,\"contable_c.txt\", sep=\"_\"), row.names = FALSE, sep = \"\\t\")\n      enrichment[[st]][[\"C\"]] <- contable_cc\n      \n      contable_koc <- make.stats(contable_ko)\n      contable_koc$KO <- rownames(contable_koc)\n      contable_kocc <- merge(contable_koc, unique(ko[,c(\"KO\", \"desc\")]), by.x=\"KO\", by.y=\"KO\", all.x=TRUE)\n  #    contable_kocc <- contable_kocc[order(contable_kocc$padj),]\n  #    write.table(contable_kocc, file=paste(st,\"contable_ko.txt\", sep=\"_\"), row.names = FALSE, sep = \"\\t\")\n      enrichment[[st]][[\"KO\"]] <- contable_kocc\n    }\n    \n    saveRDS(enrichment, file = en_file)\n  }\n}\n\nc.M <- as.matrix(contable_c[,grep(\"M\", names(contable_c))])\nc.p <- as.matrix(contable_c[,grep(\"padj\", names(contable_c))])\ncorrplot(c.M, is.corr = FALSE, p.mat = c.p, method=\"color\", insig=\"blank\")\n\n\nc.M <- sapply(sapply(enrichment, \"[[\", \"C\", simplify = FALSE), \n                function(x) {\n                  x[, grep(\"M|C\", names(x))]\n                  }, simplify = FALSE)\n\nc.M <- do.call(cbind, c.M)\nrownames(c.M) <- c.M[,1]\nc.M <- c.M[,-grep(\"C\", names(c.M))]\n\nc.p <- sapply(sapply(enrichment, \"[[\", \"C\", simplify = FALSE), \n              function(x) {\n                x[, grep(\"padj|C\", names(x))]\n              }, simplify = FALSE)\n\nc.p <- do.call(cbind, c.p)\nrownames(c.p) <- c.p[,1]\nc.p <- c.p[,-grep(\"C\", names(c.p))]\n\ncorrplot(as.matrix(c.M), is.corr = FALSE, p.mat = as.matrix(c.p), method=\"color\", insig=\"blank\")\n\nko.bc <- unique(ko[, c(\"B\", \"C\")])\nko.bc$B <- as.factor(ko.bc$B)\nko.bc$C <- as.character(ko.bc$C)\n\npdf(\"pca.pdf\", width=18, height=10)\nfor (i in paste(c(\"\\\\.95\", \"\\\\.9\", \"\\\\.85\", \"\\\\.7\", \"\\\\.5\"), \"M\", sep=\".\")) {\n  c.pc <- c.M[,grep(i, colnames(c.M))]\n  c.pca <- princomp(c.pc)\n  print(ggbiplot(c.pca, labels = rownames(c.M), circle = TRUE, groups = ko.bc[order(ko.bc$C),]$B) + \n          xlim(-4.5,4.5) + \n          ylim(-4.5,4.5))\n}\ndev.off()\n\n\nko.M <- sapply(sapply(enrichment, \"[[\", \"KO\", simplify = FALSE), \n              function(x) {\n                unique(x[, grep(\"M|KO\", names(x))])\n              }, simplify = FALSE)\nfor (i in names(ko.M)) {\n  nam <- paste(i, names(ko.M[[i]]), sep=\"_\")\n  nam[grep(\"KO\", nam)] <- \"KO\"\n  names(ko.M[[i]]) <- nam\n}\n\nko.M <- Reduce(function(...) merge(..., by=\"KO\", all=T), ko.M)\nrownames(ko.M) <- ko.M[,1]\nko.M <- ko.M[,-grep(\"KO\", names(ko.M))]\nko.M[is.na(ko.M)] <- 0\n\nko.p <- sapply(sapply(enrichment, \"[[\", \"KO\", simplify = FALSE), \n              function(x) {\n                unique(x[, grep(\"padj|KO\", names(x))])\n              }, simplify = FALSE)\nfor (i in names(ko.p)) {\n  nam <- paste(i, names(ko.p[[i]]), sep=\"_\")\n  nam[grep(\"KO\", nam)] <- \"KO\"\n  names(ko.p[[i]]) <- nam\n}\n\nko.p <- Reduce(function(...) merge(..., by=\"KO\", all=T), ko.p)\nrownames(ko.p) <- ko.p[,1]\nko.p <- ko.p[,-grep(\"KO\", names(ko.p))]\nko.p[is.na(ko.p)] <- 1\n\ncorrplot(as.matrix(ko.M), is.corr = FALSE, p.mat = as.matrix(ko.p), method=\"color\", insig=\"blank\")\n\nko.tt <- ko.M\nko.tt$KO <- rownames(ko.tt)\nko.b <- join(ko.tt, ko[,c(\"desc\", \"KO\")], by=\"KO\", match=\"first\")\n\n\nko.pc <- ko.M[rownames(ko.M) %in% RPKOs,grep(\"\\\\.5\", colnames(ko.M))]\nko.pca <- princomp(ko.pc)\nggbiplot(ko.pca, labels=rownames(ko.M))\n\nuniq.ko <- unique(ko[,c(\"KO\", \"desc\")])\n\npara <- read.delim(\"../all_parameters.txt\")\npara_AS50 <- para[grep(\"AS50\", para$SubjID), ]\nrownames(para_AS50) <- paste(\"AS50\", para_AS50$month, sep=\"_\")\npara_AS50$SubjID <- NULL\n\nraw.melp <- sapply(names(csmilc), \n               function(st) {\n                 x<- csmilc[[st]]\n                 y <- aggregate(x$melp, list(KO = x$KO), median)\n                 names(y) <- c(\"KO\", paste(st, \"melp\", sep=\"_\"))\n                 y$KO <- as.character(y$KO)\n                 y\n               }, simplify = FALSE)\n\nraw.melp.df <- Reduce(function(...) merge(..., by=\"KO\", all=T), raw.melp)\nrownames(raw.melp.df) <- raw.melp.df$KO\nraw.melp.mat <- as.matrix(raw.melp.df[, -1])\nraw.melp.mat[is.na(raw.melp.mat)] <- 0\nvars <- apply(raw.melp.mat, 1, function(x) var(x) * !any(x == 0))\ncors <- as.data.frame(t(apply(raw.melp.mat, 1, function(x) cor(x, para_AS50))))\nnames(cors) <- names(para_AS50)\ncors$max <- apply(cors, 1, function(x) x[which(abs(x) == max(abs(x), na.rm = TRUE))][1])\ncors$where <- apply(cors, 1, function(x) names(x[which(x == x[\"max\"])])[1])\ncors$var <- vars\ncors$varmax <- cors$var * cors$max\n\npos.cors <- cors[abs(cors$varmax) > 0, ]\n\nko.ord <- rownames(pos.cors[order(pos.cors$varmax, decreasing = TRUE),])\nko.extremes <- ko.ord[c(1:40, (length(ko.ord)-40):length(ko.ord))]\n\nbig.melp.mat <- cbind(raw.melp.mat, as.matrix(subset(cors, select = c(month:max, varmax))))\nbig.melp.mat[is.na(big.melp.mat)] <- 0\nbig.melp.mat.ext <- big.melp.mat[ko.extremes,]\nrownames(big.melp.mat.ext) <- expand.names(rownames(big.melp.mat.ext))\n\ncorrplot::corrplot(big.melp.mat.ext, is.cor = FALSE)\n\ncor.mat <- as.matrix(subset(cors, select = c(month:max, varmax)))\ncor.mat[is.na(cor.mat)] <- 0\ncor.mat.ext <- cor.mat[ko.extremes,]\nrownames(cor.mat.ext) <- expand.names(rownames(cor.mat.ext))\n\ncorrplot::corrplot(cor.mat.ext, is.cor = FALSE)\n\nriboprots <- rownames(big.melp.mat) %in% RPKOs\nnames(riboprots) <- rownames(big.melp.mat)\nallthere <- apply(raw.melp.mat, 1, function(x) !any(x == 0))\n\nraw.melp.ribo <- big.melp.mat[riboprots,]\nmed.ribo <- apply(raw.melp.ribo, 1, median)\n\ncorrplot::corrplot(raw.melp.ribo, is.corr = FALSE)\n\n\n# select all enrichments at path level and make a data.frame\npaths <- lapply(lapply(enrichment, \"[[\", \"C\"), \"[\", c(\"M\", \"C\"))\npaths.df <- join_all(paths, by=\"C\", type=\"inner\")\nrownames(paths.df) <- paths.df$C\npaths.df$C <- NULL\ncolnames(paths.df) <- names(enrichment)\npaths.df$desc <- brite[match(rownames(paths.df), brite$C), \"desc\"]\npaths.df[is.na(paths.df$desc), \"desc\"] <- \"Unknown [BR:ko99999]\"\nrownames(paths.df) <- paths.df$desc\n\npheatmap(paths.df[,-7], cluster_cols = FALSE, fontsize_row = 7, breaks = c(seq(from = -15, to = 0, length.out = 51), seq(from=0.1, to=5, length.out = 50)))\n\n\npaths <- sapply(sapply(enrichment, \"[[\", \"KO\", simplify = FALSE), \"[\", c(\"M\", \"KO\", \"padj\"), simplify = FALSE)\npaths.uni <- sapply(names(paths), function(y) {\n  x <- paths[[y]]\n  z <- unique(x[x$padj < 0.01, c(\"M\", \"KO\")])\n#  z <- unique(x[, c(\"M\", \"KO\")])\n  colnames(z) <- c(y, \"KO\")\n  z\n}, simplify = FALSE)\npaths.df <- Reduce(function(...) merge(..., by=\"KO\", all=T), paths.uni)\nrownames(paths.df) <- paths.df$KO\npaths.df[is.na(paths.df)] <- 0\npaths.df <- join(paths.df, ko[,c(\"KO\", \"desc\")], match = \"first\")\npaths.df[is.na(paths.df$desc), \"desc\"] <- paths.df[is.na(paths.df$desc), \"KO\"]\ndup.tab <- table(paths.df$desc)\ndup.which <- names(dup.tab[dup.tab > 1])\ndup.rows <- paths.df$desc %in% dup.which\npaths.df[dup.rows, \"desc\"] <- paste(paths.df[dup.rows, \"KO\"], paths.df[dup.rows, \"desc\"])\nrownames(paths.df) <- paths.df$desc\npaths.df$KO <- NULL\npaths.df$desc <- NULL\n\npdf(file = \"all_ko_series.pdf\", width = 9.93, height = 300)\npheatmap(paths.df, cluster_cols = FALSE, fontsize_row = 6, breaks = c(seq(from = -15, to = 0, length.out = 51), seq(from=0.1, to=5, length.out = 50)))\ndev.off()\n\n\n# \n#   try_vis <- contable_koc[contable_koc$padj < 0.01, \"M\"]\n#   names(try_vis) <- rownames(contable_koc[contable_koc$padj < 0.01,])\n#   extreme <- max(abs(c(min(try_vis), max(try_vis))))\n#   \n#   # loop through all pathways and generate images\n#   \n#   paths <- na.omit(unlist(lapply(contable_cc$desc, function(x) gsub(\"^.*:ko(\\\\d+)]$\", \"\\\\1\", x))))\n#   \n#   species <- \"ko\"\n#   out.suffix <- \"ko.data\"\n#   \n#   for(i in paths) {\n#     if(!file.exists(paste(dataset, \"/\", st, \"_maps/\", species, i, \".\", out.suffix, \".png\", sep=\"\"))) {\n#       pv.out <- pathview(gene.data = try_vis, pathway.id = i , species = species, \n#                          out.suffix = out.suffix, kegg.native = T, kegg.dir = \"KEGG_maps\",\n#                          limit = list(gene = 4),\n#                          low = list(gene = \"grey\"),\n#                          mid = list(gene = \"yellow\"))\n#     }\n#   }\n#   \n#   pv.out <- pathview(gene.data = try_vis, pathway.id = \"00121\" , species = \"ko\", \n#                      out.suffix = \"ko.data\", kegg.native = T, kegg.dir = \"KEGG_maps\",\n#                      limit = list(gene = 4),\n#                      low = list(gene = \"grey\"),\n#                      mid = list(gene = \"yellow\"))\n# \n# \n\n\n#########################################\n# unchecked code below!\n#########################################\n\n# ko.count = merge(ko, contable, by.x=\"KO\", by.y=\"KO\", all.y=TRUE)\n# \n# ko.count.uniq = ko.count[!duplicated(ko.count[,c(\"B\", \"C\", \"KO\")]),]\n# ko.count.b = aggregate(ko.count.uniq[, c(\"all\", \"top\")], by=list(B=ko.count.uniq$B, C=ko.count.uniq$C), sum)\n# \n# # maybe fishers exact test??\n# \n# ko.count.b = merge(ko.count.b, brite, by.x=\"C\", by.y=\"C\", all.x=TRUE)\n# all.sum = sum(ko.count.b$all)\n# top.sum = sum(ko.count.b$top)\n# pvals = \n#   apply(ko.count.b[,c(\"all\", \"top\")], 1, function(x) {\n#     b = binom.test(x[2], top.sum, x[1]/all.sum)\n#     b$p.value\n#   })\n# ko.count.b$pvals = pvals\n# ko.count.b <- ko.count.b[order(ko.count.b$pvals),]\n\n\n",
    "created" : 1437550938281.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1528319284",
    "id" : "7BC307CE",
    "lastKnownWriteTime" : 1434640071,
    "path" : "C:/Users/mfabijanic/Dropbox/Huson/2-make_KO_statisstics.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}