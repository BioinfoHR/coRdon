{
    "contents" : "library(Biostrings)\nlibrary(Biobase)\nlibrary(plyr)\nlibrary(stringr)\nlibrary(Rcpp)\npldensity<-function(a,groupnames){\n    #a is aggregated data.frame BY NAMES (H1,H2,...,L1,...)\n    a<-a[!is.na(a$x),]\n    l <- list()\n    y <- list()\n    for (i in 1:length(groupnames)){\n        l[[i]] <- grep(groupnames[i],a$Group.1)\n        if (length(l[[i]])) y[[i]] <- density(a$x[l[[i]]])\n        #lines(y,col=i)\n    }\n    x_lim <- range(sapply(y, function(x){ range(x$x)}))\n    y_lim <- range(sapply(y, function(x){ range(x$y)}))\n\n    plot(y[[1]],ylim=y_lim,xlim=x_lim,main = \"Density by groups\")\n    for (i in 2:length(y)){\n        lines(y[[i]],col=i)\n    }\n}\n\n\n#################################################################\n\n\n\n\nmin_length <- 30\npercentile_top <- 0.90\nperc <- c(0.95, 0.90, 0.85, 0.70, 0.50)\n#KEGG_maps_folder <- \"KEGG_maps\"\n#location_of_ko <- \"C:/Users/mfabijanic/Dropbox/Dusko/maja/ko.Robj\"\n#location_of_brite <- \"C:/Users/mfabijanic/Dropbox/Dusko/maja/brite.Robj\"\n# load KO and BRITE ontologies (use separate script to prepare)\n#load(location_of_ko)\n#load(location_of_brite)\n\nreduce.contable <- function(ctb, column = \"B\") {\n    values <- unique(ko[,column])\n    tt <- lapply(values, function(x){\n        KOs <- ko[ko[,column] == x, \"KO\", drop=TRUE]\n        KOs <- unique(KOs)\n        counts <- subset(ctb, KO %in% KOs , select = -KO)\n        colSums(counts, na.rm = TRUE)\n    })\n    contable <- do.call(rbind, tt)\n    rownames(contable) <- values\n    as.data.frame(contable)\n}\n\nmake.stats <- function(contable) {\n\n    rows <- names(contable)\n    top_rows <- rows[grep(\"top\", rows)]\n\n    all <- contable$all\n    all.sum <- sum(all)\n\n    by.top <- sapply(top_rows, function(row) {\n\n        top <- contable[,row]\n        top.sum <- sum(top)\n\n        ct <- data.frame(all = all, top)\n        names(ct) <- c(\"all\", \"cnt\")\n        rownames(ct) <- rownames(contable)\n        sc <- top.sum / all.sum\n        scaled_top <- top + 1\n        scaled_all <- all * sc + 1\n        ct$enrich <- (scaled_top - scaled_all) / scaled_all * 100\n        ct$M <- log2(scaled_top) - log2(scaled_all)\n        ct$A <- (log2(scaled_all) + log2(scaled_top)) / 2\n        pvals =\n            apply(ct[,c(\"all\", \"cnt\")], 1, function(x) {\n                b = binom.test(x[2], top.sum, x[1]/all.sum)\n                b$p.value\n            })\n        ct$pvals = pvals\n        ct$padj = p.adjust(pvals, method = \"BH\")\n        ct$all <- NULL\n        ct\n\n    }, simplify = FALSE)\n\n    bound <- do.call(cbind, by.top)\n    data.frame(all = all, bound)\n\n}\n\n\n\nmake.contable <- function(csm, KEGG) {\n    if (!KEGG) csm$KO <- as.factor(as.character(csm$ID))\n    csm$KO <- as.factor(ifelse(!is.na(as.character(csm$COG)),as.character(csm$COG),as.character(csm$KO)))\n    all <- as.vector(table(csm$KO))\n    top <- sapply(perc, function(x) {\n        as.vector(table(csm[csm$melp >= quantile(csm$melp, x), \"KO\"]))\n    })\n    top <- as.data.frame(top)\n    names(top) <- make.names(paste(\"top\", perc, sep=\"_\"))\n\n    data.frame(all = all, top, row.names = levels(csm$KO), KO = levels(csm$KO))\n}\ndoall_csm <- function(csm,levels_KEGG=c()){\n    csm <- csm[csm$len > min_length,]\n    enrichment <-list()\n    KEGG <- T\n    if (all(is.na(csm$KO))) KEGG <- F\n    if(KEGG)\n        if(!(exists(\"ko\")&&exists(\"brite\"))) {\n            KEGG <- F\n            print(\"ko.Robj and brite.Robj not found\")\n        }\n    if(!KEGG) csm$KO <- csm$ID\n    # three levels of ontology exist: B (very broad), C (pathways), and KO (orthology)\n    # we'll summarize by each level separately\n\n    # make a contingency table for KO level, this is the base for other two\n    contable_ko <- make.contable(csm, KEGG)\n    name <- unique(csm$name)\n\n    if (KEGG){\n\n        csm$KO <- as.factor(csm$KO)\n\n        if (\"B\" %in% levels_KEGG){\n            contable_b <- reduce.contable(contable_ko, \"B\")\n            contable_b <- make.stats(contable_b)\n            contable_b$B <- rownames(contable_b)\n            #    write.table(contable_b, file=paste(st,\"contable_b.txt\", sep=\"_\"), row.names = FALSE, sep = \"\\t\")\n            enrichment[[name]][[\"B\"]] <- contable_b\n            print(paste(\"Enrichment calculated for level B for name \",name,sep=\"\"))\n        }\n        if (\"C\" %in% levels_KEGG){\n\n            contable_c <- reduce.contable(contable_ko, \"C\")\n            contable_c <- make.stats(contable_c)\n            contable_c$C <- rownames(contable_c)\n            contable_cc <- merge(contable_c, brite, by.x=\"C\", by.y=\"C\", all.x=TRUE)\n            contable_cc$name <- name\n            #    contable_cc <- contable_cc[order(contable_cc$padj),]\n            #    write.table(contable_cc, file=paste(st,\"contable_c.txt\", sep=\"_\"), row.names = FALSE, sep = \"\\t\")\n            enrichment[[name]][[\"C\"]] <- contable_cc\n            print(paste(\"Enrichment calculated for level C for name \",name,sep=\"\"))\n        }\n    }\n    contable_koc <- make.stats(contable_ko)\n    contable_koc$KO <- rownames(contable_koc)\n    if (KEGG){\n        contable_kocc <- merge(contable_koc, unique(ko[,c(\"KO\", \"desc\")]), by.x=\"KO\", by.y=\"KO\", all.x=TRUE)\n        kos <- unique(csm$KO)\n    }else{\n        contable_kocc <- contable_koc\n        kos <- unique(csm$ID)\n    }\n    contable_kocc$median <- 0\n    if (!KEGG)\n    {\n        contable_kocc$desc <- name\n        contable_kocc$name <- name\n        for (i in 1:length(kos))\n            contable_kocc[contable_kocc$KO==kos[i],\"median\"] <- median(csm[csm$ID==kos[i],\"melp\"])\n    }\n    if (KEGG)\n    {\n        contable_kocc$name <- name\n        medianis2 <- aggregate.data.frame(csm$melp,by=list(csm$KO),FUN=median)\n        contable_kocc$median <- 0\n        for(i in medianis2$Group.1)\n        {\n            contable_kocc[contable_kocc$KO==i,]$median <- medianis2[medianis2$Group.1==i,]$x\n        }\n    }\n    enrichment[[name]][[\"KO\"]] <- contable_kocc\n    #    contable_kocc <- contable_kocc[order(contable_kocc$padj),]\n    #    write.table(contable_kocc, file=paste(st,\"contable_ko.txt\", sep=\"_\"), row.names = FALSE, sep = \"\\t\")\n    if(KEGG) enrichment[[name]][[\"KO\"]]<-enrichment[[name]][[\"KO\"]][,c(2:32,1,33:35)]\n    enrichment[[name]][[\"KO\"]] <- enrichment[[name]][[\"KO\"]][!is.na(enrichment[[name]][[\"KO\"]]$median),]\n    enrichment[[name]][[\"KO\"]] <- enrichment[[name]][[\"KO\"]][!duplicated(enrichment[[name]][[\"KO\"]]$KO),]\n    if (\"C\"%in% levels_KEGG)\n    {\n        #enrichment[[name]][[\"C\"]] <- enrichment[[name]][[\"C\"]][!is.na(enrichment[[name]][[\"C\"]]$median),]\n        enrichment[[name]][[\"C\"]] <- enrichment[[name]][[\"C\"]][!duplicated(enrichment[[name]][[\"C\"]]$C),]\n        enrichment[[name]][[\"C\"]]$name <- name\n    }\n    if (\"B\"%in% levels_KEGG) {\n        #enrichment[[name]][[\"B\"]] <- enrichment[[name]][[\"B\"]][!is.na(enrichment[[name]][[\"B\"]]$median),]\n        enrichment[[name]][[\"B\"]] <- enrichment[[name]][[\"B\"]][!duplicated(enrichment[[name]][[\"B\"]]$B),]\n        enrichment[[name]][[\"B\"]]$name <- name\n\n    }\n    return(enrichment[[name]])\n}\n",
    "created" : 1437981226173.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2051129607",
    "id" : "5267DB33",
    "lastKnownWriteTime" : 1437983177,
    "path" : "~/GitHub_BioinfoHR/coRdon/R/doall_csm.R",
    "project_path" : "R/doall_csm.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}