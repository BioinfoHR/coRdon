{
    "contents" : "# optimized MILC calculator\n# the only required parameter is the codon usage table set,\n# and MILC will be calculated against the average CU of that set.\n# one optional parameter:\n# subsets - (named) list of\n#         - logical vectors of the same length as nrow(s), or\n#         - additional CU table set(s) that will be processed\n# the function returns a data frame of the same row length as nrow(s)\n# and ncol equal to the number of subsets plus one (self)\n\ncalcMilc<-function(s, subsets=list()) {\n\n    # test parameters\n    if (length(subsets$ribosomal)>1) if (all(!subsets$ribosomal)) warning(\"Subset is empty! Please provide a valid subset!\")\n    if(! inherits(s, \"codonTable\")) stop(\"First argument must be a codon usage table!\")\n    nseq <- nrow(s)\n\n    if(!is.list(subsets)) stop(paste(\"subsets must be a (named) list of logical vectors, each of length\", nseq,\n                                     \"or codonTable objects (of any length)\"))\n    if(length(subsets) != 0) {\n        ok <- sapply(subsets, function(x) {\n            all(is.vector(x, mode = \"logical\"), length(x) == nseq) |\n                all(inherits(x, \"codonTable\"), nrow(x) > 0)\n        })\n        stopifnot(ok)\n        nam <- names(subsets)\n        nsubs <- length(subsets)\n        if(is.null(nam)) {\n            nam <- paste(\"subset\", 1:nsubs, sep = \".\")\n        } else {\n            nam[nam == \"\"] <- paste(\"subset\", (1:nsubs)[nam == \"\"], sep = \".\")\n        }\n        names(subsets) <- make.names(nam, unique = TRUE)\n    }\n\n    # add a dummy self selection to subsets\n    self_set <- rep(TRUE, nseq)\n    subsets <- c(list(self = c(self_set)), subsets)\n\n    # strip all unneeded info and convert to matrix\n    o<-as.matrix(s[,nostops])\n\n    # preprocess all subsets\n    gc_list <- sapply(subsets, function(y) {\n        if(is.vector(y, mode = \"logical\")) {\n            sel <- o[y,] # this should never give error, because we tested for equal length\n        } else {\n            sel <- as.matrix(y[,nostops])\n        }\n        sel_sum <- colSums(sel) # add counts per codon\n        gc <- byaa(sel_sum) # and normalize synonymous codons to sum = 1\n        gc\n    }, simplify = FALSE)\n\n    # make fc values from original table\n    fc<-byaas(o)\n\n    # and correction factor\n    corr1 <- t(t(byrcs(fc)) * as.vector(acnt-1))\n    l <- s$len\n    cf <- rowSums(corr1)/l - 0.5\n\n    # now loop through all the gc's and calculate distance for each gene in the original set\n    milcs <- sapply(gc_list, function(gc) {\n\n        ma <- 2 * o[,order(ctab$aa)] * log(t(t(fc)/gc))\n        MILC <- rowSums(ma, na.rm = TRUE)/l - cf\n    })\n    if(sum(s$len==0)) {s[s$len==0,\"problem\"]<-TRUE\n    warning(\"Sequences of length 0 exist\")\n    }\n    return(cbind(s, milcs))\n}\n",
    "created" : 1437981333042.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3207346504",
    "id" : "7751B023",
    "lastKnownWriteTime" : 1437981345,
    "path" : "~/GitHub_BioinfoHR/coRdon/R/calcMilc.R",
    "project_path" : "R/calcMilc.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}